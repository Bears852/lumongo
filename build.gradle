buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath(group: 'com.sahlbach.gradle', name: 'gradle-jetty-eclipse-plugin', version: '1.9.+')
		classpath 'com.github.rholder:gradle-one-jar:1.0.3'
	}
}

defaultTasks 'createDeploy'

apply plugin: 'java'

subprojects {
	defaultTasks 'build'

	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	
	version = '0.60-SNAPSHOT'
	ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
	ext.luceneVersion = '7.0.0'
	ext.mongoJavaVersion = '3.6.1'

	group = 'org.lumongo'
	
	
	repositories {
		mavenCentral()
		flatDir name: 'directoryRepository', dirs: rootProject.file('notInMaven')

		//maven {
			//url "https://dist.apache.org/repos/dist/dev/lucene/lucene-solr-6.6.0-RC1-rev4d055f00bba9a745737e4b6c3f9dff06dd35aa2e/lucene/maven/"
		//}
	}

    dependencies {
        testCompile 'org.testng:testng:6.8.21'
    }
	
	test {
        useTestNG()

		systemProperty 'mongoServer', 'localhost'
		systemProperty 'mongoPort', '27017'
		
		//tweaking memory settings for the forked vm that runs tests
		jvmArgs '-Xmx1500m'
		
		beforeTest { descriptor ->
			logger.lifecycle("\n\nRunning test: " + descriptor)
		}
		
		afterTest { descriptor ->
			logger.lifecycle("\nFinished test: " + descriptor + "\n\n")
		}
		
		onOutput { descriptor, event ->
			logger.lifecycle(event.message.trim())
		}
		workingDir = 'build/'
	}
	


	dependencies {
		testCompile 'junit:junit:[4.10,)'
	}

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	compileJava {
		options.debug = true
		options.debugOptions.debugLevel = "source,lines,vars"
	}


	javadoc {
		options.addStringOption("sourcepath", "src/main/java")
		exclude '**/schema/**'
	}

	sourceSets {
		main {
			resources {
				srcDir 'src/main/java'
			}
		}
		test {
			resources {
				srcDir 'src/test/java'
			}
		}
	}

	task sourceJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	jar {
		dependsOn 'sourceJar'
	}

	configurations {
		source
	}


	artifacts {
		source sourceJar
	}

}

 
